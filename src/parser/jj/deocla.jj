
options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = true;
}

PARSER_BEGIN(DeoclaParser)

package parser.jj;

import ast.expression.*;
import ast.expression.math.*;
import ast.statement.*;

public class DeoclaParser {

	public static void main(String args[]) throws ParseException, TokenMgrError, NumberFormatException {
		DeoclaParser parser = new DeoclaParser(System.in);
		//parser.Input();
	}
	
	double previousValue = 0.0;
	
}

PARSER_END(DeoclaParser)

SKIP :
{
	" "
}

TOKEN : { < VAR : "var" > }
TOKEN : { < EOL : "\n" | "\r" | "\r\n" > }
TOKEN : { < PLU : "+" > }
TOKEN : { < MIN : "-" > }
TOKEN : { < NUMBER : <DIG> | <DIG> "." <DIG> | <DIG> "." | "." <DIG> > }
TOKEN : { < #DIG : (["0"-"9"])+ > }
TOKEN : { < #LET : (["a"-"z"])+ > }
TOKEN : { < OPERATOR : <PLU> | <MIN> > }
TOKEN : { < NAME : <LET> > }


/*Start -> (Expression EOL) * EOF*/
Statement Start() :
{}
{
	(statementParse() <EOL>)* <EOF>

	{
		return new Declaration(new Identifier("b"), new Mul(new DInteger(5), new DInteger(5)));

	}
}


/*Expression -> Literal ( OPERATOR Literal )* EOL */
void statementParse() throws NumberFormatException :
{
}
{
	declarationParse()	//( <OPERATOR> Literal() )*
}

void declarationParse() throws NumberFormatException :
{
}
{
	<VAR> identifierParse() "=" expressionParse() ";"	//( <OPERATOR> Literal() )*
}

void identifierParse() throws NumberFormatException :
{
  	Token t;
}
{
	t = <NAME>	
}

/* Literal -> NUMBER*/
void expressionParse() throws NumberFormatException :
{
	Token t;
}
{
	t = <NUMBER>
}
















