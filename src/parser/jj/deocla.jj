
options {
  LOOKAHEAD = 2;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = true;
}

PARSER_BEGIN(DeoclaParser)

package parser.jj;

import ast.expression.*;
import ast.expression.math.*;
import ast.statement.*;

public class DeoclaParser {

	public static void main(String args[]) throws ParseException, TokenMgrError, NumberFormatException {
		DeoclaParser parser = new DeoclaParser(System.in);
		//parser.Input();
	}
	
	Statement lastStatement;
	
}

PARSER_END(DeoclaParser)

SKIP :{	" "}
SKIP :{ "\t" | "\n" | "\r" | "\r\n" }

TOKEN : { < VAR : "var" > }
TOKEN : { < IF : "if" > }
TOKEN : { < ELSE : "else" > }

TOKEN : { < LP : "(" > }
TOKEN : { < RP : ")" > }
TOKEN : { < LGP : "{" > }
TOKEN : { < RGP : "}" > }
TOKEN : { < LSP : "[" > }
TOKEN : { < RSP : "]" > }
TOKEN : { < LPP : "<" > }
TOKEN : { < RPP : ">" > }

TOKEN : { < EOL : "\n" | "\r" | "\r\n" > }
TOKEN : { < PLU : "+" > }
TOKEN : { < MIN : "-" > }
TOKEN : { < NUMBER : <DIG> | <DIG> "." <DIG> | <DIG> "." | "." <DIG> > }
TOKEN : { < #DIG : (["0"-"9"])+ > }
TOKEN : { < #LET : (["a"-"z"])+ > }
TOKEN : { < OPERATOR : <PLU> | <MIN> > }
TOKEN : { < NAME : <LET> > }


/*Start -> (Expression EOL) * EOF*/
Statement Start() :
{
	Statement initial = new EmptyStatement();
	Statement last = initial;
	Statement next = null;
}
{
	(next=statementParse() {
		last.next = next;
		last = next;
	  })*
	<EOF>
	{
		return initial;

	}
}


/* Statement -> Declaration | Assignment | Condition | Loop */
Statement statementParse() throws NumberFormatException :
{
  Statement s = null;
}
{
	  s = declarationParse() |
	  s = assignmenParse() |
	  s = conditionParse()
	
	{ return s; }

}
// Condition(Expression condition, Statement thenStatement, Statement elseStatement)
Condition conditionParse() throws NumberFormatException :
{
  Expression condition = new DInteger(2);
  Statement thenStatement = new EmptyStatement();
  Statement elseStatement = new EmptyStatement();
}
{
	
	(	  <IF> <LP> condition=expressionParse() <RP><LGP> 
	thenStatement=Start() 
	<RGP> [ <ELSE> 
	<LGP> 
	elseStatement=Start() 
	<RGP>]
	)
	
{
  return new Condition(condition,thenStatement,elseStatement);
}
}

Assignment assignmenParse() throws NumberFormatException :
{
  Identifier i;
  Expression e;
}
{
	i=identifierParse() "=" e= expressionParse() ";"	
{
  return new Assignment(i,e);
}
}

Declaration declarationParse() throws NumberFormatException :
{
  Identifier i;
  Expression e;
}
{
	<VAR> i=identifierParse() "=" e=expressionParse() ";"
{
  return new Declaration(i,e);
}
}

Identifier identifierParse() throws NumberFormatException :
{
  	Token t;
}
{
	t = <NAME>
	{
	  
	return new Identifier(t.image);
}
}

/* Literal -> NUMBER*/
Expression expressionParse() throws NumberFormatException :
{
	Token t;
	Expression e;
}
{
	t = <NUMBER>
	{
	  return new DInteger(2);
	}
}
















