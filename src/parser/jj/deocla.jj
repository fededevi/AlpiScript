
options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = true;
}

PARSER_BEGIN(DeoclaParser)

package parser.jj;

import ast.expression.*;
import ast.expression.math.*;
import ast.statement.*;

public class DeoclaParser {

	public static void main(String args[]) throws ParseException, TokenMgrError, NumberFormatException {
		DeoclaParser parser = new DeoclaParser(System.in);
		//parser.Input();
	}
	
	Statement lastStatement;
	
}

PARSER_END(DeoclaParser)

SKIP :{	" "}
SKIP :{ "\n" | "\r" | "\r\n" }

TOKEN : { < VAR : "var" > }
TOKEN : { < EOL : "\n" | "\r" | "\r\n" > }
TOKEN : { < PLU : "+" > }
TOKEN : { < MIN : "-" > }
TOKEN : { < NUMBER : <DIG> | <DIG> "." <DIG> | <DIG> "." | "." <DIG> > }
TOKEN : { < #DIG : (["0"-"9"])+ > }
TOKEN : { < #LET : (["a"-"z"])+ > }
TOKEN : { < OPERATOR : <PLU> | <MIN> > }
TOKEN : { < NAME : <LET> > }


/*Start -> (Expression EOL) * EOF*/
Statement Start() :
{
	Statement initial = new EmptyStatement();
	Statement last = initial;
	Statement next = null;
}
{
	(next=statementParse() {
		last.next = next;
		last = next;
	  })*
	<EOF>
	{
		return initial;

	}
}


/*Expression -> Literal ( OPERATOR Literal )* EOL */
Statement statementParse() throws NumberFormatException :
{
  Statement s = null;
}
{
		(
	  (s = declarationParse()) |
	  (s = assignmenParse())
	)
	{ return s; }

}

Assignment assignmenParse() throws NumberFormatException :
{
  Identifier i;
  Expression e= new DInteger(2);
}
{
	i=identifierParse() "=" expressionParse() ";"	
{
  return new Assignment(i,e);
}
}

Declaration declarationParse() throws NumberFormatException :
{
  Identifier i;
  Expression e= new DInteger(2);
}
{
	<VAR> i=identifierParse() "=" expressionParse() ";"
{
  return new Declaration(i,e);
}
}

Identifier identifierParse() throws NumberFormatException :
{
  	Token t;
}
{
	t = <NAME>
	{
	  
	return new Identifier(t.image);
}
}

/* Literal -> NUMBER*/
void expressionParse() throws NumberFormatException :
{
	Token t;
}
{
	t = <NUMBER>
}
















