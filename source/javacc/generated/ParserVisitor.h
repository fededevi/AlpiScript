/* Generated By:JavaCC: Do not edit this line. ParserVisitor.h Version 7.0.10 */
#ifndef PARSERVISITOR_H
#define PARSERVISITOR_H

#include "JavaCC.h"
#include "ParserTree.h"
namespace AlpiScript {
class ParserVisitor
{
  public:
  virtual void* visit(const SimpleNode *node, void* data) = 0;
  virtual void* visit(const ASTStart *node, void* data) = 0;
  virtual void* visit(const ASTAnd *node, void* data) = 0;
  virtual void* visit(const ASTOr *node, void* data) = 0;
  virtual void* visit(const ASTLessThan *node, void* data) = 0;
  virtual void* visit(const ASTLessEqual *node, void* data) = 0;
  virtual void* visit(const ASTGreaterEqual *node, void* data) = 0;
  virtual void* visit(const ASTGreaterThan *node, void* data) = 0;
  virtual void* visit(const ASTEqual *node, void* data) = 0;
  virtual void* visit(const ASTNotEqual *node, void* data) = 0;
  virtual void* visit(const ASTAdd *node, void* data) = 0;
  virtual void* visit(const ASTSub *node, void* data) = 0;
  virtual void* visit(const ASTMult *node, void* data) = 0;
  virtual void* visit(const ASTDivision *node, void* data) = 0;
  virtual void* visit(const ASTModule *node, void* data) = 0;
  virtual void* visit(const ASTNegative *node, void* data) = 0;
  virtual void* visit(const ASTNot *node, void* data) = 0;
  virtual void* visit(const ASTFloat *node, void* data) = 0;
  virtual void* visit(const ASTInteger *node, void* data) = 0;
  virtual void* visit(const ASTBoolean *node, void* data) = 0;
  virtual void* visit(const ASTIdentifier *node, void* data) = 0;
  virtual ~ParserVisitor() { }
};
class ParserDefaultVisitor : public ParserVisitor {
public:
  virtual void* defaultVisit(const SimpleNode *node, void* data) = 0;
  virtual void* visit(const SimpleNode *node, void* data) {
    return defaultVisit(node, data);
}
  virtual void* visit(const ASTStart *node, void* data) {
    return defaultVisit(node, data);
  }
  virtual void* visit(const ASTAnd *node, void* data) {
    return defaultVisit(node, data);
  }
  virtual void* visit(const ASTOr *node, void* data) {
    return defaultVisit(node, data);
  }
  virtual void* visit(const ASTLessThan *node, void* data) {
    return defaultVisit(node, data);
  }
  virtual void* visit(const ASTLessEqual *node, void* data) {
    return defaultVisit(node, data);
  }
  virtual void* visit(const ASTGreaterEqual *node, void* data) {
    return defaultVisit(node, data);
  }
  virtual void* visit(const ASTGreaterThan *node, void* data) {
    return defaultVisit(node, data);
  }
  virtual void* visit(const ASTEqual *node, void* data) {
    return defaultVisit(node, data);
  }
  virtual void* visit(const ASTNotEqual *node, void* data) {
    return defaultVisit(node, data);
  }
  virtual void* visit(const ASTAdd *node, void* data) {
    return defaultVisit(node, data);
  }
  virtual void* visit(const ASTSub *node, void* data) {
    return defaultVisit(node, data);
  }
  virtual void* visit(const ASTMult *node, void* data) {
    return defaultVisit(node, data);
  }
  virtual void* visit(const ASTDivision *node, void* data) {
    return defaultVisit(node, data);
  }
  virtual void* visit(const ASTModule *node, void* data) {
    return defaultVisit(node, data);
  }
  virtual void* visit(const ASTNegative *node, void* data) {
    return defaultVisit(node, data);
  }
  virtual void* visit(const ASTNot *node, void* data) {
    return defaultVisit(node, data);
  }
  virtual void* visit(const ASTFloat *node, void* data) {
    return defaultVisit(node, data);
  }
  virtual void* visit(const ASTInteger *node, void* data) {
    return defaultVisit(node, data);
  }
  virtual void* visit(const ASTBoolean *node, void* data) {
    return defaultVisit(node, data);
  }
  virtual void* visit(const ASTIdentifier *node, void* data) {
    return defaultVisit(node, data);
  }
  ~ParserDefaultVisitor() { }
};
}
#endif
/* JavaCC - OriginalChecksum=b600470783b54ef48aad2ed2729e0103 (do not edit this line) */
