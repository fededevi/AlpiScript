/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. grammar.jj */
/*@egen*/
options {
                  
                                
                               
                    
                           
                                
                          
                        
                               
                             
                        
                               
  
             
               
                         
                            
                              
  
  OUTPUT_LANGUAGE = "c++";
  NAMESPACE="AlpiScript";
  OUTPUT_DIRECTORY="generated";
  
  //DEBUG STUFF
  SANITY_CHECK = true;
  FORCE_LA_CHECK = true;
  DEBUG_PARSER = true;
  DEBUG_LOOKAHEAD = true;
  DEBUG_TOKEN_MANAGER = true;
}

PARSER_BEGIN(Parser)

PARSER_END(Parser)

SKIP :{	" "}
SKIP :{ "\t" | "\n" | "\r" | "\r\n" }

TOKEN : { < RETURN : "return" > }
TOKEN : { < VAR : "var" > }
TOKEN : { < IF : "if" > }
TOKEN : { < ELSE : "else" > }
TOKEN : { < WHILE : "while" > }
TOKEN : { < FUNCTION : "function" > }

TOKEN : { < TRUE : "true" > }
TOKEN : { < FALSE : "false" > }

TOKEN : { < LP : "(" > }
TOKEN : { < RP : ")" > }
TOKEN : { < LGP : "{" > }
TOKEN : { < RGP : "}" > }
TOKEN : { < LSP : "[" > }
TOKEN : { < RSP : "]" > }

//TOKEN : { < EOL : "\n" | "\r" | "\r\n" > }

TOKEN : { < ADD : "+" > }
TOKEN : { < SUB : "-" > }
TOKEN : { < MUL : "*" > }
TOKEN : { < DIV : "/" > }
TOKEN : { < MOD : "%" > }

TOKEN : { < LT : "<" > }
TOKEN : { < LE : "<=" > }
TOKEN : { < GE : ">=" > }
TOKEN : { < GT : ">" > }
TOKEN : { < EQ : "==" > }
TOKEN : { < NE : "!=" > }

TOKEN : { < AND : "&&" > }
TOKEN : { < OR : "||" > }

TOKEN : { < NOT : "!" > }

TOKEN : { < INTEGER : <DIG> > }
TOKEN : { < FLOAT : <DIG> | <DIG> "." <DIG> | <DIG> "." | "." <DIG> > }

TOKEN : { < #DIG : (["0"-"9"])+ > }
TOKEN : { < #LET : (["a"-"z", "A"-"Z"])+> }
TOKEN : { < OPERATOR : <ADD> | <SUB> > }
TOKEN : { < NAME : <LET> > }

ASTStart* parseProgram() : {}
{
  multiStatement() ";"
  { return jjtn000; }
}


void multiStatement() : {}
{
	(statementParse())*
}

Statement* statementParse() throws NumberFormatException : {}
{
  (<LP><NAME><RP>) {}
}