/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. grammar.jj */
/*@egen*/
options {
LOOKAHEAD = 13;
FORCE_LA_CHECK = true;

                              
                             
                  
                         
                              
                        
                      
                             
                           
                      
                             

           
             
                       
                          
                            

OUTPUT_LANGUAGE = "c++";
NAMESPACE="AlpiScript";
OUTPUT_DIRECTORY="source/javacc/generated";

//DEBUG STUFF
//SANITY_CHECK = true;
//DEBUG_PARSER = true;
//DEBUG_LOOKAHEAD = true;
//DEBUG_TOKEN_MANAGER = true;
}

PARSER_BEGIN(Parser)

PARSER_END(Parser)

SKIP :{	" "}
SKIP :{ "\t" | "\n" | "\r" | "\r\n" }

TOKEN : { < RETURN : "return" > }
TOKEN : { < VAR : "var" > }
TOKEN : { < IF : "if" > }
TOKEN : { < ELSE : "else" > }
TOKEN : { < WHILE : "while" > }
TOKEN : { < FUNCTION : "function" > }

TOKEN : { < LP : "(" > }
TOKEN : { < RP : ")" > }
TOKEN : { < LGP : "{" > }
TOKEN : { < RGP : "}" > }
TOKEN : { < LSP : "[" > }
TOKEN : { < RSP : "]" > }

TOKEN : { < ADD : "+" > }
TOKEN : { < SUB : "-" > }
TOKEN : { < MUL : "*" > }
TOKEN : { < DIV : "/" > }
TOKEN : { < MOD : "%" > }

TOKEN : { < LT : "<" > }
TOKEN : { < LE : "<=" > }
TOKEN : { < GE : ">=" > }
TOKEN : { < GT : ">" > }
TOKEN : { < EQ : "==" > }
TOKEN : { < NE : "!=" > }

TOKEN : { < AND : "&&" > }
TOKEN : { < OR : "||" > }

TOKEN : { < NOT : "!" > }

TOKEN : { < #DIGIT : ["0"-"9"] > }
TOKEN : { < #LETTER : ["A"-"Z","_","a"-"z"] > }

TOKEN : { < BOOLEAN : "true" | "false" > }


TOKEN : {
<INTEGER_LITERAL: <DECIMAL_LITERAL> (["l","L"])? | <HEX_LITERAL> (["l","L"])? | <OCTAL_LITERAL> (["l","L"])?>
|  <#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])*>
|  <#HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+>
|  <#OCTAL_LITERAL: "0" (["0"-"7"])*>
|  <FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])? | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])? | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])? | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]>
|  <#EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+>
|  <CHARACTER_LITERAL: "\'" (~["\'","\\","\n","\r"] | "\\" (["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"])) "\'">
|  <STRING_LITERAL: "\"" ( ~["\"","\\","\n","\r"] | "\\" ( ["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])?  | ["0"-"3"] ["0"-"7"] ["0"-"7"] | ( ["\n","\r"] | "\r\n")))* "\"">
}


TOKEN : { <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)* > }


ASTStart * parse()        : {/*@bgen(jjtree) Start */
  ASTStart *jjtn000 = new ASTStart(JJTSTART);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Start */
try {
/*@egen*/
expression()/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/  { return jjtn000; }/*@bgen(jjtree)*/
} catch (...) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
} {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void expression() : {} {
AND_parse()
}

void AND_parse()      : {} {/*@bgen(jjtree) #And(> 1) */
                             {
                               ASTAnd *jjtn001 = new ASTAnd(JJTAND);
                               bool jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                             }
                             try {
/*@egen*/ ( OR_parse()  ( <AND> OR_parse()   )* )/*@bgen(jjtree)*/
                             } catch (...) {
                               if (jjtc001) {
                                 jjtree.clearNodeScope(jjtn001);
                                 jjtc001 = false;
                               } else {
                                 jjtree.popNode();
                               }
                             } {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                               }
                             }
/*@egen*/                     }
void OR_parse()       : {} {/*@bgen(jjtree) #Or(> 1) */
                             {
                               ASTOr *jjtn001 = new ASTOr(JJTOR);
                               bool jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                             }
                             try {
/*@egen*/ ( LT_parse()  ( <OR>  LT_parse()   )* )/*@bgen(jjtree)*/
                             } catch (...) {
                               if (jjtc001) {
                                 jjtree.clearNodeScope(jjtn001);
                                 jjtc001 = false;
                               } else {
                                 jjtree.popNode();
                               }
                             } {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                               }
                             }
/*@egen*/                     }

void LT_parse()       : {} {/*@bgen(jjtree) #LessThan(> 1) */
                             {
                               ASTLessThan *jjtn001 = new ASTLessThan(JJTLESSTHAN);
                               bool jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                             }
                             try {
/*@egen*/ ( LE_parse()  ( <LT>  LE_parse()   )* )/*@bgen(jjtree)*/
                             } catch (...) {
                               if (jjtc001) {
                                 jjtree.clearNodeScope(jjtn001);
                                 jjtc001 = false;
                               } else {
                                 jjtree.popNode();
                               }
                             } {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                               }
                             }
/*@egen*/                     }
void LE_parse()       : {} {/*@bgen(jjtree) #LessEqual(> 1) */
                             {
                               ASTLessEqual *jjtn001 = new ASTLessEqual(JJTLESSEQUAL);
                               bool jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                             }
                             try {
/*@egen*/ ( GE_parse()  ( <LE>  GE_parse()   )* )/*@bgen(jjtree)*/
                             } catch (...) {
                               if (jjtc001) {
                                 jjtree.clearNodeScope(jjtn001);
                                 jjtc001 = false;
                               } else {
                                 jjtree.popNode();
                               }
                             } {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                               }
                             }
/*@egen*/                     }
void GE_parse()       : {} {/*@bgen(jjtree) #GreaterEqual(> 1) */
                             {
                               ASTGreaterEqual *jjtn001 = new ASTGreaterEqual(JJTGREATEREQUAL);
                               bool jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                             }
                             try {
/*@egen*/ ( GT_parse()  ( <GE>  GT_parse()   )* )/*@bgen(jjtree)*/
                             } catch (...) {
                               if (jjtc001) {
                                 jjtree.clearNodeScope(jjtn001);
                                 jjtc001 = false;
                               } else {
                                 jjtree.popNode();
                               }
                             } {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                               }
                             }
/*@egen*/                     }
void GT_parse()       : {} {/*@bgen(jjtree) #GreaterThan(> 1) */
                             {
                               ASTGreaterThan *jjtn001 = new ASTGreaterThan(JJTGREATERTHAN);
                               bool jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                             }
                             try {
/*@egen*/ ( EQ_parse()  ( <GT>  EQ_parse()   )* )/*@bgen(jjtree)*/
                             } catch (...) {
                               if (jjtc001) {
                                 jjtree.clearNodeScope(jjtn001);
                                 jjtc001 = false;
                               } else {
                                 jjtree.popNode();
                               }
                             } {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                               }
                             }
/*@egen*/                     }
void EQ_parse()       : {} {/*@bgen(jjtree) #Equal(> 1) */
                             {
                               ASTEqual *jjtn001 = new ASTEqual(JJTEQUAL);
                               bool jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                             }
                             try {
/*@egen*/ ( NE_parse()  ( <EQ>  NE_parse()   )* )/*@bgen(jjtree)*/
                             } catch (...) {
                               if (jjtc001) {
                                 jjtree.clearNodeScope(jjtn001);
                                 jjtc001 = false;
                               } else {
                                 jjtree.popNode();
                               }
                             } {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                               }
                             }
/*@egen*/                     }
void NE_parse()       : {} {/*@bgen(jjtree) #NotEqual(> 1) */
                             {
                               ASTNotEqual *jjtn001 = new ASTNotEqual(JJTNOTEQUAL);
                               bool jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                             }
                             try {
/*@egen*/ ( ADD_parse() ( <NE>  ADD_parse()  )* )/*@bgen(jjtree)*/
                             } catch (...) {
                               if (jjtc001) {
                                 jjtree.clearNodeScope(jjtn001);
                                 jjtc001 = false;
                               } else {
                                 jjtree.popNode();
                               }
                             } {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                               }
                             }
/*@egen*/                     }
void ADD_parse()      : {} {/*@bgen(jjtree) #Add(> 1) */
                             {
                               ASTAdd *jjtn001 = new ASTAdd(JJTADD);
                               bool jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                             }
                             try {
/*@egen*/ ( SUB_parse() ( <ADD> SUB_parse()  )* )/*@bgen(jjtree)*/
                             } catch (...) {
                               if (jjtc001) {
                                 jjtree.clearNodeScope(jjtn001);
                                 jjtc001 = false;
                               } else {
                                 jjtree.popNode();
                               }
                             } {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                               }
                             }
/*@egen*/                     }
void SUB_parse()      : {} {/*@bgen(jjtree) #Sub(> 1) */
                             {
                               ASTSub *jjtn001 = new ASTSub(JJTSUB);
                               bool jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                             }
                             try {
/*@egen*/ ( MUL_parse() ( <SUB> MUL_parse()  )* )/*@bgen(jjtree)*/
                             } catch (...) {
                               if (jjtc001) {
                                 jjtree.clearNodeScope(jjtn001);
                                 jjtc001 = false;
                               } else {
                                 jjtree.popNode();
                               }
                             } {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                               }
                             }
/*@egen*/                     }
void MUL_parse()      : {} {/*@bgen(jjtree) #Mult(> 1) */
                             {
                               ASTMult *jjtn001 = new ASTMult(JJTMULT);
                               bool jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                             }
                             try {
/*@egen*/ ( DIV_parse() ( <MUL> DIV_parse()  )* )/*@bgen(jjtree)*/
                             } catch (...) {
                               if (jjtc001) {
                                 jjtree.clearNodeScope(jjtn001);
                                 jjtc001 = false;
                               } else {
                                 jjtree.popNode();
                               }
                             } {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                               }
                             }
/*@egen*/                     }
void DIV_parse()      : {} {/*@bgen(jjtree) #Division(> 1) */
                             {
                               ASTDivision *jjtn001 = new ASTDivision(JJTDIVISION);
                               bool jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                             }
                             try {
/*@egen*/ ( MOD_parse() ( <DIV> MOD_parse()  )* )/*@bgen(jjtree)*/
                             } catch (...) {
                               if (jjtc001) {
                                 jjtree.clearNodeScope(jjtn001);
                                 jjtc001 = false;
                               } else {
                                 jjtree.popNode();
                               }
                             } {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                               }
                             }
/*@egen*/                     }
void MOD_parse()      : {} {/*@bgen(jjtree) #Module(> 1) */
                             {
                               ASTModule *jjtn001 = new ASTModule(JJTMODULE);
                               bool jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                             }
                             try {
/*@egen*/ ( unary()     ( <MOD> unary()      )* )/*@bgen(jjtree)*/
                             } catch (...) {
                               if (jjtc001) {
                                 jjtree.clearNodeScope(jjtn001);
                                 jjtc001 = false;
                               } else {
                                 jjtree.popNode();
                               }
                             } {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                               }
                             }
/*@egen*/                     }

void unary() : {}
{
 parseFloat()
 |/*@bgen(jjtree) #Negative( 1) */
   {
     ASTNegative *jjtn001 = new ASTNegative(JJTNEGATIVE);
     bool jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/ ( "-" parseFloat() )/*@bgen(jjtree)*/
   } catch (...) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
   } {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001,  1);
     }
   }
/*@egen*/             
 | parseInteger()
 |/*@bgen(jjtree) #Negative( 1) */
   {
     ASTNegative *jjtn002 = new ASTNegative(JJTNEGATIVE);
     bool jjtc002 = true;
     jjtree.openNodeScope(jjtn002);
   }
   try {
/*@egen*/ ( "-" parseInteger() )/*@bgen(jjtree)*/
   } catch (...) {
     if (jjtc002) {
       jjtree.clearNodeScope(jjtn002);
       jjtc002 = false;
     } else {
       jjtree.popNode();
     }
   } {
     if (jjtc002) {
       jjtree.closeNodeScope(jjtn002,  1);
     }
   }
/*@egen*/             
 | parseBoolean()
 | identifier()
 | <LP> expression() <RP>
 | <NOT>/*@bgen(jjtree) #Not( 1) */
         {
           ASTNot *jjtn003 = new ASTNot(JJTNOT);
           bool jjtc003 = true;
           jjtree.openNodeScope(jjtn003);
         }
         try {
/*@egen*/ expression()/*@bgen(jjtree)*/
         } catch (...) {
           if (jjtc003) {
             jjtree.clearNodeScope(jjtn003);
             jjtc003 = false;
           } else {
             jjtree.popNode();
           }
         } {
           if (jjtc003) {
             jjtree.closeNodeScope(jjtn003,  1);
           }
         }
/*@egen*/        
}

void parseFloat()       : {Token * t;/*@bgen(jjtree) Float */
  ASTFloat *jjtn000 = new ASTFloat(JJTFLOAT);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Float */
  try {
/*@egen*/ t=<FLOATING_POINT_LITERAL>/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/ { jjtn000->jjtSetValue((void *)t->image.c_str()); }/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void parseInteger()          : {Token * t;/*@bgen(jjtree) Integer */
  ASTInteger *jjtn000 = new ASTInteger(JJTINTEGER);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Integer */
 try {
/*@egen*/(t=<INTEGER_LITERAL>)/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/{ jjtn000->jjtSetValue((void *)t->image.c_str()); }/*@bgen(jjtree)*/
 } catch (...) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
 } {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/ }

void parseBoolean()          : {Token * t;/*@bgen(jjtree) Boolean */
  ASTBoolean *jjtn000 = new ASTBoolean(JJTBOOLEAN);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Boolean */
  try {
/*@egen*/ t=<BOOLEAN>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ { jjtn000->jjtSetValue((void *)t->image.c_str()); }/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void identifier()            : {Token * t;/*@bgen(jjtree) Identifier */
  ASTIdentifier *jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Identifier */
  try {
/*@egen*/ t=<IDENTIFIER>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ { jjtn000->jjtSetValue((void *)t->image.c_str()); }/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }