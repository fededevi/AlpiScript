
options {
  //LOOKAHEAD = 2;
  //#CHOICE_AMBIGUITY_CHECK = 2;
  //#OTHER_AMBIGUITY_CHECK = 1;
  //#STATIC = false;
  //ERROR_REPORTING = true;
  //JAVA_UNICODE_ESCAPE = false;
  //UNICODE_INPUT = false;
  //IGNORE_CASE = false;
  //USER_TOKEN_MANAGER = false;
  //USER_CHAR_STREAM = false;
  //BUILD_PARSER = true;
  //BUILD_TOKEN_MANAGER = true;
  
  MULTI=true;
  VISITOR=true;
  NODE_DEFAULT_VOID=true;
  VISITOR_DATA_TYPE="void*";
  VISITOR_RETURN_TYPE="void*";
  
  OUTPUT_LANGUAGE = "c++";
  NAMESPACE="AlpiScript";
  OUTPUT_DIRECTORY="generated";
  
  //DEBUG STUFF
  //SANITY_CHECK = true;
  //FORCE_LA_CHECK = true;
  //DEBUG_PARSER = true;
  //DEBUG_LOOKAHEAD = true;
  //DEBUG_TOKEN_MANAGER = true;
}

PARSER_BEGIN(Parser)

PARSER_END(Parser)

SKIP :{	" "}
SKIP :{ "\t" | "\n" | "\r" | "\r\n" }

TOKEN : { < RETURN : "return" > }
TOKEN : { < VAR : "var" > }
TOKEN : { < IF : "if" > }
TOKEN : { < ELSE : "else" > }
TOKEN : { < WHILE : "while" > }
TOKEN : { < FUNCTION : "function" > }

TOKEN : { < TRUE : "true" > }
TOKEN : { < FALSE : "false" > }

TOKEN : { < LP : "(" > }
TOKEN : { < RP : ")" > }
TOKEN : { < LGP : "{" > }
TOKEN : { < RGP : "}" > }
TOKEN : { < LSP : "[" > }
TOKEN : { < RSP : "]" > }

TOKEN : { < SMCL : ";" > }

//TOKEN : { < EOL : "\n" | "\r" | "\r\n" > }

TOKEN : { < ADD : "+" > }
TOKEN : { < SUB : "-" > }
TOKEN : { < MUL : "*" > }
TOKEN : { < DIV : "/" > }
TOKEN : { < MOD : "%" > }

TOKEN : { < LT : "<" > }
TOKEN : { < LE : "<=" > }
TOKEN : { < GE : ">=" > }
TOKEN : { < GT : ">" > }
TOKEN : { < EQ : "==" > }
TOKEN : { < NE : "!=" > }

TOKEN : { < AND : "&&" > }
TOKEN : { < OR : "||" > }

TOKEN : { < NOT : "!" > }

TOKEN : { < INTEGER : <DIG> > }
TOKEN : { < FLOAT : <DIG> | <DIG> "." <DIG> | <DIG> "." | "." <DIG> > }

TOKEN : { < #DIG : (["0"-"9"])+ > }
TOKEN : { < #LET : (["a"-"z", "A"-"Z"])> }
TOKEN : { < OPERATOR : <ADD> | <SUB> > }
TOKEN : { < NAME : <LET>(<LET> | <DIG>)+ > }

ASTProgram * parseProgram() #Program : {}
{
  (multiStatement()<SMCL>) { return jjtThis; }
}


void multiStatement() : {}
{
	(statementParse())*
}

ASTStatement *  statementParse() #Statement  : {}
{
  (<LP><NAME><RP>) { return jjtThis; }
}